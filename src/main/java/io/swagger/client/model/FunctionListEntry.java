/*
 * OpenFaaS API Gateway
 * OpenFaaS API documentation
 *
 * OpenAPI spec version: 0.8.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * FunctionListEntry
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-06T06:46:10.176+02:00")
public class FunctionListEntry {
  @SerializedName("name")
  private String name = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("invocationCount")
  private BigDecimal invocationCount = null;

  @SerializedName("replicas")
  private BigDecimal replicas = null;

  @SerializedName("availableReplicas")
  private BigDecimal availableReplicas = null;

  @SerializedName("envProcess")
  private String envProcess = null;

  @SerializedName("labels")
  private Map<String, String> labels = new HashMap<>();

  @SerializedName("annotations")
  private Map<String, String> annotations = null;

  public FunctionListEntry name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the function
   * @return name
  **/
  @ApiModelProperty(example = "nodeinfo", required = true, value = "The name of the function")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FunctionListEntry image(String image) {
    this.image = image;
    return this;
  }

   /**
   * The fully qualified docker image name of the function
   * @return image
  **/
  @ApiModelProperty(example = "functions/nodeinfo:latest", required = true, value = "The fully qualified docker image name of the function")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public FunctionListEntry invocationCount(BigDecimal invocationCount) {
    this.invocationCount = invocationCount;
    return this;
  }

   /**
   * The amount of invocations for the specified function
   * @return invocationCount
  **/
  @ApiModelProperty(example = "1337.0", required = true, value = "The amount of invocations for the specified function")
  public BigDecimal getInvocationCount() {
    return invocationCount;
  }

  public void setInvocationCount(BigDecimal invocationCount) {
    this.invocationCount = invocationCount;
  }

  public FunctionListEntry replicas(BigDecimal replicas) {
    this.replicas = replicas;
    return this;
  }

   /**
   * The current minimal ammount of replicas
   * @return replicas
  **/
  @ApiModelProperty(example = "2.0", required = true, value = "The current minimal ammount of replicas")
  public BigDecimal getReplicas() {
    return replicas;
  }

  public void setReplicas(BigDecimal replicas) {
    this.replicas = replicas;
  }

  public FunctionListEntry availableReplicas(BigDecimal availableReplicas) {
    this.availableReplicas = availableReplicas;
    return this;
  }

   /**
   * The current available amount of replicas
   * @return availableReplicas
  **/
  @ApiModelProperty(example = "2.0", required = true, value = "The current available amount of replicas")
  public BigDecimal getAvailableReplicas() {
    return availableReplicas;
  }

  public void setAvailableReplicas(BigDecimal availableReplicas) {
    this.availableReplicas = availableReplicas;
  }

  public FunctionListEntry envProcess(String envProcess) {
    this.envProcess = envProcess;
    return this;
  }

   /**
   * Process for watchdog to fork
   * @return envProcess
  **/
  @ApiModelProperty(example = "node main.js", required = true, value = "Process for watchdog to fork")
  public String getEnvProcess() {
    return envProcess;
  }

  public void setEnvProcess(String envProcess) {
    this.envProcess = envProcess;
  }

  public FunctionListEntry labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public FunctionListEntry putLabelsItem(String key, String labelsItem) {
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @ApiModelProperty(required = true, value = "")
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }

  public FunctionListEntry annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public FunctionListEntry putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionListEntry functionListEntry = (FunctionListEntry) o;
    return Objects.equals(this.name, functionListEntry.name) &&
        Objects.equals(this.image, functionListEntry.image) &&
        Objects.equals(this.invocationCount, functionListEntry.invocationCount) &&
        Objects.equals(this.replicas, functionListEntry.replicas) &&
        Objects.equals(this.availableReplicas, functionListEntry.availableReplicas) &&
        Objects.equals(this.envProcess, functionListEntry.envProcess) &&
        Objects.equals(this.labels, functionListEntry.labels) &&
        Objects.equals(this.annotations, functionListEntry.annotations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, image, invocationCount, replicas, availableReplicas, envProcess, labels, annotations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionListEntry {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    invocationCount: ").append(toIndentedString(invocationCount)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    availableReplicas: ").append(toIndentedString(availableReplicas)).append("\n");
    sb.append("    envProcess: ").append(toIndentedString(envProcess)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

